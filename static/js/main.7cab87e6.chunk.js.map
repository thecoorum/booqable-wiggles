{"version":3,"sources":["index.js"],"names":["WIGGLES","value","label","POSITIONS","COLORS","App","useState","phrase","setPhrase","wiggle","setWiggle","position","setPosition","color","setColor","useClipboard","length","hasCopied","onCopy","getPreviewPosition","pos","handleChange","e","type","target","find","el","padding","borderWidth","base","sm","borderRadius","maxWidth","margin","id","mb","onChange","placeholder","map","p","background","fontWeight","fontSize","colorScheme","width","onClick","py","px","overflow","display","justifyContent","className","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.7cab87e6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  Box,\n  ChakraProvider,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Select,\n  Code,\n  Text,\n  Flex,\n  Button,\n  useClipboard,\n} from \"@chakra-ui/react\";\n\nimport \"./styles.css\";\n\nconst WIGGLES = [\n  { value: \"arrow-1\", label: \"Arrow 1\" },\n  { value: \"arrow-2\", label: \"Arrow 2\" },\n  { value: \"arrow-3\", label: \"Arrow 3\" },\n  { value: \"arrow-4\", label: \"Arrow 4\" },\n  { value: \"arrow-5\", label: \"Arrow 5\" },\n  { value: \"arrow-6\", label: \"Arrow 6\" },\n  { value: \"arrow-7\", label: \"Arrow 7\" },\n  { value: \"arrow-8\", label: \"Arrow 8\" },\n  { value: \"circle-1\", label: \"Circle 1\" },\n  { value: \"circle-2\", label: \"Circle 2\" },\n  { value: \"circle-3\", label: \"Circle 3\" },\n  { value: \"line-1\", label: \"Line 1\" },\n  { value: \"line-2\", label: \"Line 2\" },\n];\nconst POSITIONS = [\n  { value: \"center\", label: \"Center\" },\n  { value: \"top\", label: \"Top\" },\n  { value: \"bottom\", label: \"Bottom\" },\n  { value: \"left\", label: \"Left\" },\n  { value: \"right\", label: \"Right\" },\n];\nconst COLORS = [\n  { value: \"green\", label: \"Green\" },\n  { value: \"blue\", label: \"Blue\" },\n  { value: \"secondary-blue\", label: \"Secondary Blue\" },\n  { value: \"orange\", label: \"Orange\" },\n  { value: \"purple\", label: \"Purple\" },\n  { value: \"pink\", label: \"Pink\" },\n];\n\nfunction App() {\n  const [phrase, setPhrase] = useState(\"\");\n  const [wiggle, setWiggle] = useState(WIGGLES[0]);\n  const [position, setPosition] = useState(POSITIONS[0]);\n  const [color, setColor] = useState(COLORS[0]);\n\n  const { hasCopied, onCopy } = useClipboard(`<span class=\"wiggle wiggle__${\n    wiggle.value\n  } wiggle--\n  ${position.value}\">\n  ${phrase.length ? phrase : \"dolor sit\"}\n  </span>`);\n\n  const getPreviewPosition = (pos) => {\n    switch (pos) {\n      case \"left\":\n        return \"flex-end\";\n      case \"right\":\n        return \"flex-start\";\n      default:\n        return \"center\";\n    }\n  };\n\n  const handleChange = (e, type) => {\n    const { value } = e.target;\n\n    switch (type) {\n      case \"phrase\":\n        setPhrase(value);\n        break;\n      case \"wiggle\":\n        setWiggle(WIGGLES.find((el) => el.value === e.target.value));\n        break;\n      case \"position\":\n        setPosition(POSITIONS.find((el) => el.value === e.target.value));\n        break;\n      case \"color\":\n        setColor(COLORS.find((el) => el.value === e.target.value));\n      default:\n        return;\n    }\n  };\n\n  return (\n    <ChakraProvider>\n      <Box\n        padding={4}\n        borderWidth={{ base: 0, sm: 1 }}\n        borderRadius={{ base: 'none', sm: 'lg' }}\n        maxWidth=\"xl\"\n        margin={{ base: \"0\", sm: \"20px auto\" }}\n      >\n        <FormControl id=\"phrase\" mb={2}>\n          <FormLabel>Phrase to wrap</FormLabel>\n          <Input\n            value={phrase}\n            onChange={(e) => handleChange(e, \"phrase\")}\n            placeholder=\"dolor sit\"\n          />\n        </FormControl>\n        <FormControl id=\"wiggle\" mb={2}>\n          <FormLabel>Select a wiggle</FormLabel>\n          <Select\n            value={wiggle.value}\n            onChange={(e) => handleChange(e, \"wiggle\")}\n          >\n            {WIGGLES.map((wiggle) => (\n              <option key={wiggle.value} value={wiggle.value}>\n                {wiggle.label}\n              </option>\n            ))}\n          </Select>\n          <FormHelperText>\n            It's not recommended to use circle wiggles for long phrases\n          </FormHelperText>\n        </FormControl>\n        <FormControl id=\"position\" mb={5}>\n          <FormLabel>Select position of a wiggle</FormLabel>\n          <Select\n            value={position.value}\n            onChange={(e) => handleChange(e, \"position\")}\n          >\n            {POSITIONS.map((position) => (\n              <option key={position.value} value={position.value}>\n                {position.label}\n              </option>\n            ))}\n          </Select>\n        </FormControl>\n        <FormControl id=\"position\" mb={5}>\n          <FormLabel>Select color of a wiggle</FormLabel>\n          <Select\n            value={color.value}\n            onChange={(e) => handleChange(e, \"color\")}\n          >\n            {COLORS.map((color) => (\n              <option key={color.value} value={color.value}>\n                {color.label}\n              </option>\n            ))}\n          </Select>\n        </FormControl>\n        <Box p={4} borderWidth={1} borderRadius=\"lg\" background=\"gray.100\">\n          <Text fontWeight=\"600\" mb={2} fontSize=\"lg\">\n            Code\n          </Text>\n          <Box\n            p={2}\n            mb={3}\n            background=\"white\"\n            borderWidth={1}\n            borderRadius=\"lg\"\n          >\n            <Code colorScheme=\"white\">\n              &lt;span class=\"wiggle wiggle__{wiggle.value} wiggle--\n              {position.value} wiggle--{color.value}\"&gt;\n              {phrase.length ? phrase : \"dolor sit\"}\n              &lt;/span&gt;\n            </Code>\n          </Box>\n          <Button mb={5} colorScheme=\"blue\" width=\"100%\" onClick={onCopy}>\n            {hasCopied ? \"Copied!\" : \"Copy\"}\n          </Button>\n          <Text fontWeight=\"600\" mb={2} fontSize=\"lg\">\n            Preview\n          </Text>\n          <Box\n            borderWidth={1}\n            borderRadius=\"lg\"\n            py={10}\n            px={3}\n            mb={5}\n            background=\"white\"\n            overflow=\"hidden\"\n            display=\"flex\"\n            justifyContent={getPreviewPosition(position.value)}\n          >\n            <span\n              className={`wiggle wiggle__${wiggle.value} wiggle--${position.value} wiggle--${color.value}`}\n            >\n              {phrase.length ? phrase : \"dolor sit\"}\n            </span>\n          </Box>\n          <Box\n            borderWidth={1}\n            borderRadius=\"lg\"\n            py={10}\n            px={3}\n            background=\"white\"\n            overflow=\"hidden\"\n            display=\"flex\"\n            justifyContent={getPreviewPosition(position.value)}\n          >\n            <span className=\"preview\">\n              lorem ipsum{\" \"}\n              <span\n                className={`wiggle wiggle__${wiggle.value} wiggle--${position.value} wiggle--${color.value}`}\n              >\n                {phrase.length ? phrase : \"dolor sit\"}\n              </span>{\" \"}\n              amet\n            </span>\n          </Box>\n        </Box>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}